#!/usr/bin/env bash
#
# Fuz: Terminal-based, file fuzzy finder for ultra-fast text search. Integrated with vim
# Project homepage: https://github.com/Magnushhoie/fuz

# 1. section: global constants
set -o nounset
set -o pipefail
if [[ ${TRACE-0} == "1" ]]; then
  set -o xtrace
fi

# Script parameters
SCRIPT_DIR="$(
  cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1 >/dev/null
  pwd -P
)"
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
declare -r SCRIPT_DIR
declare -r SCRIPT_PATH
declare -r STRING2ARG_FILE="$SCRIPT_DIR/string2arg.sh"

# FZF GUI parameters
export FZF_CTRL_T_OPTS="--preview 'bat --color=always --line-range :500 {}'"
export FZF_DEFAULT_OPTS="--reverse --inline-info --ansi"

# 2. section: functions
function usage() {
  cat <<EOF #
Usage: $(
    basename "${BASH_SOURCE[0]}"
  ) [-cdehmnos]
      -p path -c filename 
      -d num -m num -s filesize
      [filename or pattern]

Fuz interactively searches the current directory, and
opens selected file at search result with less / vim / system app.

Skips .gitignore, hidden, binary and large files.

Project homepage: https://github.com/Magnushhoie/fuz

USAGE:
  fuz
  fuz --edit
  fuz --names
  fuz [options] <FILENAME or PATTERN>
  fuz --path <PATH>
  fuz --create <FILENAME>

ARGS:
  <FILENAME>  A filename to search, partial match
  <PATTERN>   Search pattern
  <PATH>      A directory to search from

OPTIONS:
  -p, --path         Search path (default current)
  -n, --names        Search for filenames
  -e, --edit         Open with editor (vim) instead of less
  -o, --open         Open with system editor
  -c, --create       Create new file with vim
  -d, --max-depth    Max search depth (3)
  -m, --max-lines    Max line-matches per file (1000)
  -s, --max-size     Max file-size (50K)
  -f, --fuzzy-search Enable fuzzy instead of exact search
  -h, --help         Print this help and exit

EXAMPLES:
- Search file-contents from current directory, open with less:
    fuz

- Search filenames (-n) from current directory, edit (-e) with vim:
    fuz -n -e

- Search file bash from path (-p) notes/
    fuz -p notes/ bash

EOF
  exit 1
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  edit='0'         # e
  open_system='0'  # o
  create_file='0'  # c
  maxdepth='3'     # d
  maxlines='1000'  # m
  maxsize='50K'    # m
  names='0'        # n
  fuzzysearch='-e' # f
  setup="0"        # setup
  dir="$(realpath .)" # p

  while :; do
    case "${1-}" in
      -h | --help) usage ;;
      -e | --edit) edit='1' ;;
      -o | --open) open_system='1' ;;
      -c | --create) create_file='1' ;;
      -n | --names) names='1' ;;
      -f | --fuzzy-search) fuzzysearch='' ;;
      --setup) setup='1' ;;
      -d | --max-depth)
        maxdepth="${2-}"
        shift
        ;;
      -m | --max-lines)
        maxlines="${2-}"
        shift
        ;;
      -s | --max-size)
        maxsize="${2-}"
        shift
        ;;
      -p | --path)
        dir="$(realpath "${2-}")"
        shift
        ;;
      -?*) die "Unknown option: $1" ;;
      *) break ;;
    esac
    shift
  done

  #query="${*-}"
  query="${*-}"

  return 0
}

# all progs need to be given as parameters
function _check_required_programs() {
  for p in "${@}"; do
    hash "${p}" 2>&- \
      || {
        msg " Required program \"${p}\" not installed or in search PATH."
        exit 1
      }
  done
}

#######################################
# Adds aliases fuz, fz fze, fzo to .bashrc/.zshrc
# with user inputted path, if not present
# Globals:
#   file: SCRIPT_PATH
# Arguments:
#   None
#######################################
function add_aliases_bashrc() {
  read -rp "Add fuz aliases with path to ~/.bashrc and ~/.zshrc? y/n"$'\n' -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then

    read -rp $'\n'"Please specify search directory (default $SCRIPT_DIR/notes/):"$'\n' filepath
    FUZ_DIR=$(realpath "${filepath:-"$SCRIPT_DIR"/notes}")

    echo -e "Adding aliases to .bashrc and ~/.zshrc ..."
    BASHRC=$(echo -e "$HOME"/.bashrc)
    ZSHRC=$(echo -e "$HOME"/.zshrc)
    LINE0=$(echo -e alias fuz=\'$SCRIPT_PATH\') && echo "$LINE0"
    LINE1=$(echo -e alias fz=\'fuz --path \"$FUZ_DIR\"\') && echo "$LINE1"
    LINE2=$(echo -e alias fze=\'fuz --edit --names --path \"$FUZ_DIR\"\') && echo "$LINE2"
    LINE3=$(echo -e alias fzo=\'fuz --open --names --path \"$FUZ_DIR\"\') && echo "$LINE3"

    for file in "$BASHRC" "$ZSHRC"; do
      for line in "$LINE0" "$LINE1" "$LINE2" "$LINE3"; do
        grep -qF -- "$line" "$file" || echo -e "$line" >>"$file"
      done
    done
    echo -e "Please restart your shell for changes to take effect"
  fi
}

#######################################
# Open file with less or vim (-e) at selected linenumber
# Globals:
#   file: File fullpath
#   linematch: Line number
#   edit: Flag for less (0) or vim (1)
#   open_system: Flag (-o) for opening with system default program
# Arguments:
#   None
#######################################
function _open_filematch() {

  # If open system editor (-o) flag, use open (also valid for directories)
  if [[ $open_system -eq 1 ]]; then
    msg "$file"

    # Use open (MacOS) if present, else xdg-open (Linux)
    if [[ -z $(command -v xdg-open) ]]; then
      open "$file"

    else
      xdg-open "$file"
    fi

    exit 0
  fi

  # If valid file, open with vim if edit (-e) flag, else less
  if [[ -f $file ]]; then
    msg "$file"

    if [[ $edit == 1 ]]; then
      # Vim mouse-mode, start at top, softwrap, no numbering/highlight
      vim +":set mouse=a" +":silent! normal g;" \
        +":set number nohlsearch" \
        +":set wrap linebreak nolist" \
        +":set textwidth=0 showbreak= colorcolumn= conceallevel=0 " \
        +"${linematch:-0}" "$file"

    else
      # Less w/ colors, highlight match, insensitive+incremental search, enable CTRL+C
      bat "$file" --pager="less +${linematch:-0}g --ignore-case" --style plain
    fi
  fi
  exit 0
}

#######################################
# Searches specific file, select linematch, open with _open_filematch
# Globals:
#   file: File to open, fullpath
#   dir: Search directory
#   STRING2ARG_FILE: Functions for for FZF preview
# Arguments:
#   None
#######################################
function _search_file() {
  if [[ -f $file ]]; then

    # Ripgrep file for lines with starting characters
    # sed interpret byte-sequence as 7-bit ASCII / POSIX:
    # https://www.gnu.org/software/sed/manual/html_node/Locale-Considerations.html
    # FZF with preview, auto-select if single match
    filematch=$(
      rg ".*[:alpha:]" "$file" --color=always --no-heading --with-filename --line-number \
        | LC_ALL=C sed "s;$dir/;;" 2>/dev/null \
        | fzf "$fuzzysearch" --select-1 --preview="source $STRING2ARG_FILE; cd \"$dir\"; string2arg \"$dir\"/{}"
    ) || exit 1

    # Extract filename and linenumber from match
    file=$(cut -d":" -f1 <<<"$filematch")
    file="$dir/$file"
    linematch=$(cut -d":" -f2 <<<"$filematch")

    # Open with vim or less
    _open_filematch
  fi
  exit 0
}

function main() {

  # Check in path: fzf, ripgrep and bat
  _check_required_programs fzf rg bat realpath

  # Parse parameters
  parse_params "$@"

  # If setup flag, add aliases to .bashrc
  if [[ $setup -eq 1 ]]; then
    add_aliases_bashrc
    exit 1
  fi

  # Main program
  cd "$dir" || exit 1

  # fuz -c [filename]: Create new file at $dir
  # Open with Atom if -o flag set, else vim
  if [[ $create_file -eq 1 ]]; then
    file="$dir/$query"
    msg "$file"
    if [[ $open_system -eq 1 ]]; then
      atom "$file"
    else
      vim "$file"
    fi
    exit 0
  fi

  # fuz [filename]: If only 1 file is found (n=2 levels down), open with vim (edit=1) or search it (edit=0)
  # Find files matching [filename], 2 levels deep, stop after 2nd match
  # Null terminator trick for handling filepaths with whitespaces
  # https://unix.stackexchange.com/questions/75186/how-to-do-head-and-tail-on-null-delimited-input-in-bash
  files=()
  while read -r -d $'\0'; do
    files+=("$REPLY")
  done < <(
    find . -iname "*$query*" -maxdepth "$maxdepth" -print0 2>/dev/null \
      | tr '\0\n' '\n\0' | head -n 2 | tr '\0\n' '\n\0'
  ) || exit 1

  # If found single match, open or search
  if [[ ${#files[@]} -eq 1 ]]; then
    file=$(realpath "${files[0]}")

    if [[ $edit -eq 1 ]]; then
      # Open file with vim or less
      _open_filematch
    else
      # Search single file contents
      _search_file
    fi
  fi

  # fuz -e: Search filenames, open with vim
  # Ripgrep for filenames only
  # select with fzf exact search, select if 1 match
  if [[ $names == 1 ]]; then
    file=$(
      rg "^" --files-with-matches --max-columns 1 \
        --max-depth "$maxdepth" --max-filesize "$maxsize" 2>/dev/null \
        | fzf "$fuzzysearch" --select-1 --query "${query-}" --preview="bat --color=always {}"
    ) || if [[ $? -eq 130 ]]; then exit 1; fi # Exit if Ctrl + C (FZF error code 130)

    # Open with vim or less
    _open_filematch

  # fuz: Search file-contents, open with less
  # Ripgrep w/ line no. and names, ignoring binary files and .git
  # FZF with preview, auto-select if single match
  else
    filematch=$(
      rg ".*[:alpha:]" --color=always --no-heading --with-filename --line-number --max-columns 100 \
        --max-depth "$maxdepth" --max-filesize "$maxsize" --max-count "$maxlines" 2>/dev/null \
        | LC_ALL=C sed "s;$dir/;;" \
        | fzf "$fuzzysearch" --select-1 --query "${query:- }" --preview="source $STRING2ARG_FILE; cd \"$dir\"; string2arg \"$dir\"/{}"
    ) || if [[ $? -eq 130 ]]; then exit 1; fi # Exit if Ctrl + C (FZF error code 130)

    # Extract filename and linenumber from match
    file=$(cut -d":" -f1 <<<"$filematch")
    file="$dir/$file"
    linematch=$(cut -d":" -f2 <<<"$filematch")

    # Open with vim or less
    _open_filematch
  fi

  exit 0
}

# Run program
main "$@"
